name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  checkversions:
    runs-on: ubuntu-latest

    outputs:
      current: ${{ steps.set.outputs.current }}
      target: ${{ steps.set.outputs.target }}
      test: ${{ steps.set.outputs.test }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version
        id: set
        run: |          
          echo "current=$(grep '^current=' version | awk -F= '{print $2}')" >> $GITHUB_OUTPUT
          echo "target=$(grep '^target=' version | awk -F= '{print $2}')" >> $GITHUB_OUTPUT
          echo "test=$(grep '^test=' version | awk -F= '{print $2}')" >> $GITHUB_OUTPUT

      - name: Display version
        run: |
          echo ">>>> CURRENT VERSION: ${{ steps.set.outputs.current }}"
          echo ">>>> TARGET VERSION: ${{ steps.set.outputs.target }}"
          echo ">>>> TEST FLAG: ${{ steps.set.outputs.test }}"

  build-and-push:
    needs: checkversions
    runs-on: ubuntu-latest
    if: ${{ needs.checkversions.outputs.current == needs.checkversions.outputs.target }}

    steps:
      - name: Display version
        run: |
          echo ">>>> CURRENT VERSION: ${{ steps.set.outputs.current }}"
          echo ">>>> TARGET VERSION: ${{ steps.set.outputs.target }}"
          echo ">>>> TEST FLAG: ${{ steps.set.outputs.test }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Info
        run: pwd && ls -l

      - name: Create log directories
        run: |
          sudo mkdir /fitness_logs_default/
          sudo mkdir /fitness_logs_default/log/
          sudo mkdir /fitness_logs_default/log/test/
          sudo touch /fitness_logs_default/log/test/logback.log
          sudo chmod u+rw,g+rw,o+rw /fitness_logs_default/log/test/logback.log
          ls -l /fitness_logs_default/log/test/

      - name: Build jar
        run: ./gradlew clean build

      - name: Build Docker image
        if: ${{ needs.checkversions.outputs.test == 0 }}
        run: docker build -t novaservefitness/backend:${{ needs.checkversions.outputs.current }} -t novaservefitness/backend:latest .

      - name: Push image to Docker Hub
        if: ${{ needs.checkversions.outputs.test == 0 }}
        run: |
          docker push novaservefitness/backend:${{ needs.checkversions.outputs.current }}
          docker push novaservefitness/backend:latest

      - name: Build Docker test image
        if: ${{ needs.checkversions.outputs.test == 1 }}
        run: docker build -t novaservefitness/backend:${{ needs.checkversions.outputs.current }}-test -t novaservefitness/backend:latest-test .

      - name: Push test image to Docker Hub
        if: ${{ needs.checkversions.outputs.test == 1 }}
        run: | 
          docker push novaservefitness/backend:${{ needs.checkversions.outputs.current }}-test
          docker push novaservefitness/backend:latest-test

  deploy-to-ec2:
    needs:
      - checkversions
      - build-and-push
    runs-on: ubuntu-latest
    if: ${{ needs.checkversions.outputs.current == needs.checkversions.outputs.target }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
          EC2_USERNAME: ${{secrets.EC2_USERNAME}}
          DOCKERHUB_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
        run: |
          echo "$EC_PRIVATE_KEY" > ec2_private_key && chmod 600 ec2_private_key && 
          ssh -o StrictHostKeyChecking=no -o "ServerAliveInterval 60" -o "ServerAliveCountMax 10" -i ec2_private_key ${EC2_USERNAME}@${EC2_HOSTNAME} '
            echo && echo ">>>> ACTIVATE SSH AGENT..." && echo &&
            ssh-agent bash && ssh-add ./keys/git_ssh_key && 
            echo && echo ">>>> CHANGE DIRECTORY TO FITNESS-FRONTEND..." && echo && 
            cd ~/fitness-frontend &&
            echo && echo ">>>> CHECKOUT TO ORIGIN/BUILD..." && echo && 
            git checkout origin/build &&
            echo && echo ">>>> PULL UPDATES FROM ORIGIN/BUILD..." && echo && 
            git pull origin build &&
            echo && echo ">>>> REMOVE CURRENT BUILD FROM NGINX..." && echo && 
            sudo rm -rf /var/www/html/fitness-build/* &&
            echo && echo ">>>> COPY NEW BUILD TO NGINX..." && echo && 
            sudo cp -r ./build/. /var/www/html/fitness-build/ &&
            echo && echo ">>>> STOP BACKEND CONTAINER..." && echo && 
            sudo docker stop backend &&
            echo && echo ">>>> REMOVE BACKEND CONTAINER..." && echo && 
            sudo docker rm backend && 
            echo && echo ">>>> REMOVE BACKEND IMAGE..." && echo && 
            sudo docker image rm novaservefitness/backend:latest &&
            echo && echo ">>>> LOGIN TO DOCKER HUB..." && echo && 
            cat ~/keys/docker_hub_password.txt | sudo docker login --username ${DOCKERHUB_USERNAME} --password-stdin && 
            echo && echo ">>>> CHANGE DIRECTORY TO HOSTING..." && echo && 
            cd ~/hosting/backend && 
            echo && echo ">>>> PULL LATEST IMAGE AND CREATE BACKEND CONTAINER..." && echo && 
            sudo docker compose up --force-recreate -d && 
            echo && echo ">>>> CHECK NGINX..." && echo && 
            sudo nginx -t && 
            echo && echo ">>>> RELOAD NGINX..." && echo && 
            sudo systemctl reload nginx && 
            echo && echo ">>>> PRINT NGINX STATUS..." && echo && 
            sudo systemctl status nginx
            '